snippet ;var;
(define $1 $2)
$0
endsnippet

snippet ;if;
(if ($1)
	($2)
	($3)
)
$0
endsnippet

snippet ;and;
(and ($1) ($2))
endsnippet

snippet ;func;
;; ${1:Type} -> ${2:Type}
;; ${3:Purpose}
(check-expect ($4 ${6:Input}) ${7:Output})
(check-expect ($4 ${8:Input}) ${9:Output})

;(define ($4 $5) ${11:Output}) ;stub

;(define ($4 $5) ;template
;    (... $5))

(define (${4:Function} ${5:Inputs}) 
	($0)
)
endsnippet

snippet ;wish;
;; $1 -> $2
;; ${3:Purpose} 
;!!!
(define ($4 $5) $6)
endsnippet

snippet ;sad;
;; ${1:Data Name} is ${2:Data Type}
;; interp. $3

(define ${4:Test Var} ${5:Test Value})
(define ${6:Test Var} ${7:Test Value})

#;
(define (fn-for-${8:(short name)} ${9:Input})
	(... $9))

;; Template rules used:
;;   - atomic non-distinct: $2

$0
endsnippet
